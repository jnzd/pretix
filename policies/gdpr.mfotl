LET DataProcessing(_p12 : string, _p13 : string, _p14 : string, _p15 : string)- =
    ∃caller. ∃cls. ∃field. ∃owner.
    (read(cls, field, _p15, caller, owner, _p14)
    ∨:L (∃value. write(cls, field, _p15, caller, value, owner, _p14));
        _p13 <- "Pretix";
        _p12 <- "Minitwit") IN
LET GiveConsent(_p6 : string, _p7 : string, _p8 : string) =
    input("SetCookieConsentView", "accept", "true", _p6, "internal");
        _p8 <- "Pretix";
        _p7 <- "marketing" IN
LET IsCollection(_p9 : string) =
    ∃caller. ∃func. ∃param. ∃value. input(func, param, value, caller, _p9) IN
LET IsFair(_p21 : string) = ⊤ IN
LET IsNecessaryForLegitimateInterest(_p3 : string, _p4 : string, _p5 : string) = ⊤;
        _p5 <- "being able to provide the service";
        _p4 <- "Pretix";
        _p3 <- "internal" IN
LET IsOverridenByDataSubjectInterests(_p16 : string, _p17 : string, _p18 : string) = ⊥ IN
LET IsTransparent(_p19 : string, _p20 : string) = ⊤ IN
LET PersonalData(_p10 : string, _p11 : string) =
    ∃caller. ∃cls. ∃field. ∃purpose. ∃value. read(cls, field, _p10, caller, _p11, purpose)
    ∨ write(cls, field, _p10, caller, value, _p11, purpose) IN
LET Exception3(d : string, ds : string, e : string, i : string) =
    PersonalData(d, ds) ∧ IsOverridenByDataSubjectInterests(e, i, ds) IN
LET IsLawful(_p2 : string) =
    (∃c. ∃d. ∃ds. ∃e. ∃i. ∃p. DataProcessing(p, c, _p2, d)
    ∧ IsNecessaryForLegitimateInterest(_p2, e, i)
    ∧ ¬Exception3(d, ds, e, i))
    ∨ (∃c. ∃d. ∃ds. ∃p. ∃pr. DataProcessing(pr, c, _p2, d)
    ∧ PersonalData(d, ds)
    ∧ ⧫[0s,∞) GiveConsent(ds, p, c)) IN

□[0s,∞) (
    ∀a. ∀c. ∀d. ∀ds. ∀p. DataProcessing(p, c, a, d) ∧:L PersonalData(d, ds)
    →:L
    IsLawful(a) ∧ IsFair(a) ∧ IsTransparent(a, ds)
)
